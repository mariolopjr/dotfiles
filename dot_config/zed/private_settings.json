// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run `zed: open default settings` from the
// command palette (cmd-shift-p / ctrl-shift-p)
{
  "features": {
    "edit_prediction_provider": "zed",
    "copilot": true
  },
  "auto_install_extensons": {
    "astro": true,
    "html": true,
    "lua": true,
    "toml": true
  },
  "telemetry": {
    "metrics": false,
    "diagnostics": false
  },
  "vim_mode": true,
  "buffer_font_family": "JetBrainsMono Nerd Font",
  "ui_font_size": 14,
  "buffer_font_size": 14,
  "buffer_font_weight": 300,
  "buffer_font_features": {
    "calt": true
  },
  "theme": {
    "mode": "system",
    "light": "One Light",
    "dark": "One Dark"
  },
  "relative_line_numbers": true,
  "vim": {
    "toggle_relative_line_numbers": true
  },
  "cursor_blink": false,
  "soft_wrap": "editor_width",
  "file_scan_inclusions": [".env", "docker-compose.*.yml", "*.md"],
  // ai configuration
  "assistant": {
    "enable_experimental_live_diffs": true,
    "default_model": {
      "provider": "zed.dev",
      "model": "claude-3-5-sonnet-latest"
    },
    "version": "2"
  },
  "show_copilot_suggestions": true,
  "show_edit_predictions": false, // disable ai inline completions
  // ui configuration
  "inlay_hints": {
    "enabled": true
  },
  "chat_panel": {
    "button": "never"
  },
  "collaboration_panel": {
    "button": false
  },
  "project_panel": {
    "button": false
  },
  "tab_bar": {
    "show": false
  },
  "toolbar": {
    "breadcrumbs": true,
    "quick_actions": false
  },
  "scrollbar": {
    "show": "never"
  },
  "vertical_scroll_margin": 0,
  "indent_guides": {
    "enabled": true,
    "coloring": "indent_aware"
  },
  "centered_layout": {
    "left_padding": 0.15,
    "right_padding": 0.15
  },
  // terminal
  "terminal": {
    "shell": {
      "with_arguments": {
        "program": "/opt/homebrew/bin/fish",
        "args": ["-l"]
      }
    }
  },
  // lsp settings
  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "cargo": {
          "allFeatures": true,
          "loadOutDirsFromCheck": true,
          "buildScripts": {
            "enable": true
          }
        },
        "rustfmt": {
          "extraArgs": ["--unstable-features"]
        },
        "procMacro": {
          "enable": true,
          "ignored": {
            "async-trait": ["async_trait"],
            "napi-derive": ["napi"],
            "async-recursion": ["async_recursion"]
          }
        },
        // clippy lints
        "checkOnSave": true,
        // diagnostics
        "diagnostics": {
          "disabled": ["unresolved-macro-call"],
          "experimental": {
            "enable": true
          }
        },
        "inlayHints": {
          "maxLength": null,
          "lifetimeElisionHints": {
            "enable": "skip_trivial",
            "useParameterNames": true
          },
          "closureReturnTypeHints": {
            "enable": "always"
          }
        },
        "completion": {
          "snippets": {
            "custom": {
              "Arc::new": {
                "postfix": "arc",
                "body": ["Arc::new(${receiver})"],
                "requires": "std::sync::Arc",
                "scope": "expr"
              },
              "Mutex::new": {
                "postfix": "mutex",
                "body": ["Mutex::new(${receiver})"],
                "requires": "std::sync::Mutex",
                "scope": "expr"
              },
              "Some": {
                "postfix": "some",
                "body": ["Some(${receiver})"],
                "scope": "expr"
              },
              "Ok": {
                "postfix": "ok",
                "body": ["Ok(${receiver})"],
                "scope": "expr"
              },
              "Rc::new": {
                "postfix": "rc",
                "body": ["Rc::new(${receiver})"],
                "requires": "std::rc::Rc",
                "scope": "expr"
              },
              "Box::pin": {
                "postfix": "boxpin",
                "body": ["Box::pin(${receiver})"],
                "requires": "std::boxed::Box",
                "scope": "expr"
              },
              "vec!": {
                "postfix": "vec",
                "body": ["vec![${receiver}]"],
                "description": "vec![]",
                "scope": "expr"
              }
            }
          }
        }
      }
    }
  }
}
