// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // main navigation
  {
    "context": "Dock || DebugPanel || Terminal || Editor || ProjectPanel",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // put key-bindings here if you want them to work in normal & visual mode
  // space a: [A]I
  // space t: [T]oggle Settings
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // Chat with AI
      "space a c": "agent::ToggleFocus",
      "space a i": "assistant::InlineAssist",

      // space g: [G]it
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g h r": "git::Restore",
      "space g g": "git_panel::ToggleFocus",

      // space t: [T]oggle Settings
      "space t i": "editor::ToggleInlayHints", // Toggle inlay hints
      "space t w": "editor::ToggleSoftWrap", // Toggle soft wrap
      "space t z": "workspace::ToggleCenteredLayout", // Toggle Zen mode, NOTE: not fully working yet

      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // Open recent project
      "space f n": "workspace::NewFile",
      "space f p": "projects::OpenRecent",

      // Search word under cursor
      "space s w": "pane::DeploySearch",

      /// Zed IDE pages
      "space z d": "debug_panel::ToggleFocus",
      "space z e": "zed::Extensions",
      "space z k": "zed::OpenKeymap",
      "space z p": "zed::OpenProjectSettings",
      "space z s": "zed::OpenSettings",

      // Go to file with `gf`
      "g f": "editor::OpenExcerpts",

      "s": ["vim::PushSneak", {}],
      "S": ["vim::PushSneakBackward", {}]
    }
  },
  // put key-bindings here if you want them to work only in normal mode
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // General
      "space space": "file_finder::Toggle",

      // +LSP
      "space .": "editor::ToggleCodeActions",
      "space c a": "editor::ToggleCodeActions",
      "space c f": "editor::Format",
      "space c r": "editor::Rename",
      "space c s": "outline::Toggle",
      "space c S": "project_symbols::Toggle",

      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g e": "editor::GoToDeclaration",
      "g E": "editor::GoToDeclarationSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g K": "editor::ShowSignatureHelp",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",

      // TODO: Go to next/prev error when supported
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",

      // Diagnostic
      "space x x": "diagnostics::Deploy",

      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      // TODO: git diff is not ready yet, refer https://github.com/zed-industries/zed/issues/8665#issuecomment-2194000497

      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",

      // Close active panel
      "shift-q": "pane::CloseActiveItem",
      "ctrl-q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem",

      // Close other items
      "space b o": "pane::CloseInactiveItems",

      // Save file
      "ctrl-s": "workspace::Save",
      "space f w": "workspace::Save",

      // Tab switcher
      "space o": "tab_switcher::Toggle",

      // Project search
      "space /": "pane::DeploySearch",

      // TODO: Open other files
      // Show project panel with current file
      "space e": "pane::RevealInProjectPanel",
      "space t b": "workspace::ToggleBottomDock",
      "space t c": "workspace::ToggleRightDock",
      "space t e": "workspace::ToggleLeftDock",
      "space t z": "workspace::ToggleZoom"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-/": "terminal_panel::ToggleFocus"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-\\": "workspace::NewTerminal"
    }
  },
  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      "space space": "file_finder::Toggle",

      // Open recent project
      "space f p": "projects::OpenRecent"
    }
  },
  // Insert keybindings
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore", // remap jj in insert mode to escape
      "j k": "vim::NormalBefore", // remap jk in insert mode to escape
      "ctrl-i": "editor::ShowEditPrediction",
      "ctrl-k": "editor::ShowSignatureHelp"
    }
  },
  // Run nearest task
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      "space r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }]
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",

      // Close project panel as project file panel on the right
      "q": "workspace::ToggleRightDock"
    }
  }
]
